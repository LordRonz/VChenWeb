@page "/activity"
@using System.Net.Http.Json;
@using VChenWeb.Models;
@inject HttpClient httpClient;
@using VChenWeb.Utils;
@using Microsoft.EntityFrameworkCore;
@using VChenWeb.Data;

@using PatientModel = VChenWeb.Models.Patient
@using Table = VChenWeb.Components.Table.Table

@using Timer = System.Timers.Timer;

@implements IDisposable;

<VChenWeb.Components.Table.Table Config="Config" />


@* @inject AppDbContext dbContext *@
@inject IDbContextFactory<AppDbContext> DbFactory
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@code {
    [CascadingParameter]
    public VChenWeb.Components.Layout.MainLayout Layout { get; set; }
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Element> Elements = new List<Element>();
    private string infoFormat = "Showing {first_item} to {last_item} of {all_items}";

    private MCustomer customer;
    Timer _timer;

    public TableConfig Config { get; set; } = new TableConfig(new List<TableColumn>(), new List<object>());

    private IEnumerable<PatientModel> Patients = new List<PatientModel>();

    protected override void OnInitialized()
    {
        Layout.ChangeTitle("Your Transaction History");
    }

    private void StartHotReload()
    {
        _timer = new Timer(10000); // 10 seconds interval
        _timer.Elapsed += async (sender, e) => await LoadHistoryAndUpdateUi();
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await ProtectedSessionStore.GetAsync<string>("token");
            if (!token.Success)
            {
                NavManager.NavigateTo("/login");
                return;
            }
            var authPayload = VChenWeb.Utils.Auth.ValidateToken(token.Value);
            if (authPayload == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            var userName = VChenWeb.Utils.Auth.GetSubFromSecurityToken(authPayload);

            var dbContext = DbFactory.CreateDbContext();

            customer = await dbContext.MCustomer.Where(c => c.NOMHP == userName).FirstOrDefaultAsync();

            await LoadHistory();

            StartHotReload();

            StateHasChanged();
        }
    }

    private async Task LoadHistoryAndUpdateUi()
    {
        await LoadHistory();
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {  // empty on purpose
        }
    }

    private async Task LoadHistory()
    {
        var dbContext = DbFactory.CreateDbContext();

        await dbContext.Database.ExecuteSqlAsync($"EXECUTE usp_HistoryPoint '{customer.NOMBR}'");

        var histories = await dbContext.HistoryPoint.Where(c => c.NOMBR == customer.NOMBR).OrderByDescending(c => c.TGFAK).ToArrayAsync();

        var dataSource = histories.Select(el =>
        {
            return (object)new { tanggal = el.TGFAK, keterangan = el.POINT > 0 ? "Penambahan Poin" : "Pengurangan Poin", point = el.POINT };
        }
        ).ToList();

        Config = new TableConfig(new List<TableColumn> {
                new TableColumn { Caption="Tgl", DataField="tanggal" },
                new TableColumn { Caption="Keterangan", DataField="keterangan" },
                new TableColumn { Caption="Point", DataField="point" },
            }, dataSource);
    }

}
