@page "/"
@layout VChenWeb.Components.Layout.HomeLayout
@using Microsoft.EntityFrameworkCore;
@using System.Timers
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using VChenWeb.Data
@using VChenWeb.Models
@using Color = MudBlazor.Color
@using Transition = MudBlazor.Transition
@using Size = MudBlazor.Size
@using Timer = System.Timers.Timer;

@implements IDisposable;

<PageTitle>Home</PageTitle>

@if (loaded)
{   <div class="w-100 d-flex align-items-center flex-column home-container">
        <MudContainer Class="d-flex flex-column justify-content-between" Style="height: 38vh;">
            <div class="w-100 mt-6 d-flex justify-content-end">
                <MudImage Src="images/logo-SR.jpeg" Alt="Sari Rasa" Elevation="25" Class="" Width="35" Height="35" />
            </div>
            <div class="d-flex align-items-center gap-4 w-100 align-items-start">
                @* <MudImage Src="/images/profile.jpg" Class="rounded-circle profile-image" Width="80" Height="80"></MudImage> *@
                <div>
                    <p class="m-0 p-0 text-white fw-light">Hello,</p>
                    <h2 class="h2 fw-light text-white mb-4">@name</h2>
                    <h3 class="h6 text-white fw-light">Jumlah Point</h3>
                    <h3 class="h2 text-white">@point</h3>
                </div>
            </div>
            <MudPaper Class="pa-4 kartu-member-container" Elevation="3" Style="background: #E7C449; justify-self: end; margin-bottom: -6px">
                <div class="d-flex align-items-center justify-content-center gap-4">
                    <div>
                        <h3 class="h4 m-0 text-uppercase">Kartu Member</h3>
                    </div>
                    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Error" Href="/card" Style="border-radius: 10px; background: #F4F1F1; color: #FB0000; text-transform: capitalize">Lihat Kartu</MudButton>
                </div>
            </MudPaper>
        </MudContainer>
        <MudCard Class="w-100 pb-24 position-relative promo-container">
            <MudContainer Class="pt-8">
                <MudText Class="mb-2 fw-bold">Sari Rasa Online Shopping (08.00 ~ 21.00)</MudText>
                <MudFab Color="Color.Success" Style="border-radius: 10px;" StartIcon="@Icons.Material.Filled.Whatsapp" Label="Order Via Whatsapp" Class="w-100 mb-4" Target="_blank" Href="https://wa.me/628113500899" />
                <MudText Class="fw-bold">Promosi</MudText>
                @if (promosi.Length > 0)
                {
                    <MudCarousel Class="mud-width-full d-md-none mt-2" Style="height:250px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                        @foreach (MPromosi p in promosi)
                        {
                            <MudCarouselItem Transition="transition">
                                <div class="d-flex justify-content-center h-100 w-100" style="">
                                    <MudImage Src="@GetPromosiLink(p.Promosi)" Alt="Promosi" Class="rounded-lg" Style="min-height:100%; min-width: 100%; object-fit: contain;" />
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                    <MudCarousel Class="mud-width-full d-none d-md-block mt-2" Style="height:350px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                        @foreach (MPromosi p in promosi)
                        {
                            <MudCarouselItem Transition="transition">
                                <div class="d-flex justify-content-center h-100 w-100" style="">
                                    <MudImage Src="@GetPromosiLink(p.Promosi)" Alt="Promosi" Class="rounded-lg" Style="min-height:100%; min-width: 100%; object-fit: contain;" />
                                </div>
                            </MudCarouselItem>
                        }
                    </MudCarousel>
                }
            </MudContainer>
        </MudCard>
    </div>
}
else
{
    <MudContainer Class="d-flex justify-content-center align-items-center vh-100">
        <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
    </MudContainer>
}


@* @inject AppDbContext dbContext *@
@inject IDbContextFactory<AppDbContext> DbFactory
@inject ProtectedSessionStorage ProtectedSessionStore
@inject NavigationManager NavManager
@inject IServiceScopeFactory serviceFactory
@code {
    private bool arrows = true;
    private bool bullets = true;
    private bool enableSwipeGesture = true;
    private bool autocycle = true;
    private Transition transition = Transition.Slide;
    private bool loaded = false;

    Timer _timer;
    MCustomer customer;

    string userName = "";
    string name = "";
    int point = 0;
    MPromosi[] promosi = [];

    private string GetPromosiLink(string slug)
    {
        return $"images/{slug}";
    }

    private void StartHotReload()
    {
        _timer = new Timer(10000); // 10 seconds interval
        _timer.Elapsed += async (sender, e) => await LoadPromosiAndUpdateUi();
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            var token = await ProtectedSessionStore.GetAsync<string>("token");
            if (!token.Success)
            {
                NavManager.NavigateTo("/login");
                return;
            }
            var authPayload = VChenWeb.Utils.Auth.ValidateToken(token.Value);
            if (authPayload == null)
            {
                NavManager.NavigateTo("/login");
                return;
            }

            var dbContext = DbFactory.CreateDbContext();

            userName = VChenWeb.Utils.Auth.GetSubFromSecurityToken(authPayload);
            customer = await dbContext.MCustomer.Where(c => c.NOMHP == userName).FirstOrDefaultAsync();
            name = customer.NMCUS;

            var now = DateTime.Now;

            promosi = await dbContext.MPromosi.Where(t => t.TGLAwal <= now && t.TGLAkhir >= now).OrderByDescending(t => t.Promosi).ToArrayAsync();

            await LoadPromosi();

            StartHotReload();

            loaded = true;

            StateHasChanged();
        }
    }

    private async Task LoadPromosiAndUpdateUi()
    {
        await LoadPromosi();
        try
        {
            await InvokeAsync(StateHasChanged);
        }
        catch
        {  // empty on purpose
        }
    }

    private async Task LoadPromosi()
    {
        var dbContext = DbFactory.CreateDbContext();

        await dbContext.Database.ExecuteSqlAsync($"EXECUTE usp_CekPoint '{customer.NOMBR}'");
        // await dbContext.Database.ExecuteSqlAsync($"EXECUTE usp_Customer_View '{customer.NOMBR}'");
  
        var sldPoint = await dbContext.SldPoint.Where(p => p.NOMBR == customer.NOMBR).FirstOrDefaultAsync();
        point = sldPoint?.POINT ?? 0;
    }
}

<style>
    .kartu-member-container {
        border-radius: 20px 20px 0px 0px;
        max-width: 100%;
    }
    .promo-container {
        border-top-left-radius: 30px !important;
    }
    .home-container {
        background: linear-gradient(151.34deg, #C61818 -0.49%, #600C0C 60.04%);
    }
</style>
